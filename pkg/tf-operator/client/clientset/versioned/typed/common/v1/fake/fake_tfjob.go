// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	tensorflowv1 "github.com/kube-queue/tf-operator-extension/pkg/tf-operator/apis/tensorflow/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTFJobs implements TFJobInterface
type FakeTFJobs struct {
	Fake *FakeKubeflowV1
	ns   string
}

var tfjobsResource = schema.GroupVersionResource{Group: "kubeflow.org", Version: "v1", Resource: "tfjobs"}

var tfjobsKind = schema.GroupVersionKind{Group: "kubeflow.org", Version: "v1", Kind: "TFJob"}

// Get takes name of the tFJob, and returns the corresponding tFJob object, and an error if there is any.
func (c *FakeTFJobs) Get(ctx context.Context, name string, options v1.GetOptions) (result *tensorflowv1.TFJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tfjobsResource, c.ns, name), &tensorflowv1.TFJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*tensorflowv1.TFJob), err
}

// List takes label and field selectors, and returns the list of TFJobs that match those selectors.
func (c *FakeTFJobs) List(ctx context.Context, opts v1.ListOptions) (result *tensorflowv1.TFJobList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tfjobsResource, tfjobsKind, c.ns, opts), &tensorflowv1.TFJobList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &tensorflowv1.TFJobList{ListMeta: obj.(*tensorflowv1.TFJobList).ListMeta}
	for _, item := range obj.(*tensorflowv1.TFJobList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tFJobs.
func (c *FakeTFJobs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tfjobsResource, c.ns, opts))

}

// Create takes the representation of a tFJob and creates it.  Returns the server's representation of the tFJob, and an error, if there is any.
func (c *FakeTFJobs) Create(ctx context.Context, tFJob *tensorflowv1.TFJob, opts v1.CreateOptions) (result *tensorflowv1.TFJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tfjobsResource, c.ns, tFJob), &tensorflowv1.TFJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*tensorflowv1.TFJob), err
}

// Update takes the representation of a tFJob and updates it. Returns the server's representation of the tFJob, and an error, if there is any.
func (c *FakeTFJobs) Update(ctx context.Context, tFJob *tensorflowv1.TFJob, opts v1.UpdateOptions) (result *tensorflowv1.TFJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tfjobsResource, c.ns, tFJob), &tensorflowv1.TFJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*tensorflowv1.TFJob), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeTFJobs) UpdateStatus(ctx context.Context, tFJob *tensorflowv1.TFJob, opts v1.UpdateOptions) (*tensorflowv1.TFJob, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(tfjobsResource, "status", c.ns, tFJob), &tensorflowv1.TFJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*tensorflowv1.TFJob), err
}

// Delete takes name of the tFJob and deletes it. Returns an error if one occurs.
func (c *FakeTFJobs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tfjobsResource, c.ns, name), &tensorflowv1.TFJob{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTFJobs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tfjobsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &tensorflowv1.TFJobList{})
	return err
}

// Patch applies the patch and returns the patched tFJob.
func (c *FakeTFJobs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *tensorflowv1.TFJob, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tfjobsResource, c.ns, name, pt, data, subresources...), &tensorflowv1.TFJob{})

	if obj == nil {
		return nil, err
	}
	return obj.(*tensorflowv1.TFJob), err
}
